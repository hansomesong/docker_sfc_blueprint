tosca_definitions_version: cloudify_dsl_1_3

imports:
  - http://www.getcloudify.org/spec/cloudify/4.4/types.yaml
  - plugin:cloudify-utilities-plugin
  - imports/types.yaml

inputs:
  endpoint_blueprint_id:
    type: string
    default: 'cfy_lab_infrastructure_endpoint'

  docker_api_ip:
    type: string

  docker_api_port:
    type: string

  docker_api_version:
    type: string

  host_container_name:
    type: string

  host_container_image:
    type: string

  ovs_container_name:
    type: string

  ovs_container_image:
    type: string

  server_container_name:
    type: string

  server_container_image:
    type: string

  host_ovs_network_name:
    type: string

  host_ovs_network_cidr:
    type: string

  ovs_server_network_name:
    type: string

  ovs_server_network_cidr:
    type: string

  ovs_main_bridge_name:
    type: string

  ovs_flows_default_table:
    type: string

  ovs_flows_default_priority:
    type: string

  ovs_endpoint_1_bridge_name:
    type: string

  ovs_main_bridge_to_endpoint_1_interface_name:
    type: string

  ovs_main_bridge_from_endpoint_1_interface_name:
    type: string

  ovs_endpoint_2_bridge_name:
    type: string

  ovs_main_bridge_to_endpoint_2_interface_name:
    type: string

  ovs_main_bridge_from_endpoint_2_interface_name:
    type: string

  ovs_endpoint_3_bridge_name:
    type: string

  ovs_main_bridge_to_endpoint_3_interface_name:
    type: string

  ovs_main_bridge_from_endpoint_3_interface_name:
    type: string

node_templates:
  host_container:
    type: cloudify.nodes.docker.Container
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      name: { get_input: host_container_name }
      image: { get_input: host_container_image }
      command: ['/bin/bash']

  ovs_container:
    type: cloudify.nodes.docker.Container
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      name: { get_input: ovs_container_name }
      image: { get_input: ovs_container_image }
      command: ~

  server_container:
    type: cloudify.nodes.docker.Container
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      name: { get_input: server_container_name }
      image: { get_input: server_container_image }
      command: ['/bin/bash']

  host_ovs_network:
    type: cloudify.nodes.docker.Network
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      name: { get_input: host_ovs_network_name }
      cidr: { get_input: host_ovs_network_cidr }

  ovs_server_network:
    type: cloudify.nodes.docker.Network
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      name: { get_input: ovs_server_network_name }
      cidr: { get_input: ovs_server_network_cidr }

  host_to_ovs_interface:
    type: cloudify.nodes.docker.network.Interface
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      network_name: { get_property: [host_ovs_network, name] }
      container_id: { get_attribute: [host_container, result_properties, id] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: host_container
      - type: cloudify.relationships.connected_to
        target: host_ovs_network

  ovs_to_host_interface:
    type: cloudify.nodes.docker.network.Interface
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      network_name: { get_property: [host_ovs_network, name] }
      container_id: { get_attribute: [ovs_container, result_properties, id] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: ovs_container
      - type: cloudify.relationships.connected_to
        target: host_ovs_network

  server_to_ovs_interface:
    type: cloudify.nodes.docker.network.Interface
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      network_name: { get_property: [ovs_server_network, name] }
      container_id: { get_attribute: [server_container, result_properties, id] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: server_container
      - type: cloudify.relationships.connected_to
        target: ovs_server_network

  ovs_to_server_interface:
    type: cloudify.nodes.docker.network.Interface
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      network_name: { get_property: [ovs_server_network, name] }
      container_id: { get_attribute: [ovs_container, result_properties, id] }
    relationships:
      - type: cloudify.relationships.connected_to
        target: ovs_container
      - type: cloudify.relationships.connected_to
        target: ovs_server_network

  host_networking_config:
    type: cloudify.nodes.docker.container.NetworkingConfig
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      container_name: { get_property: [host_container, name] }
      subnet_cidr: { get_property: [ovs_server_network, cidr] }
      next_hop_ip: { get_attribute: [ovs_to_host_interface, ip_address] }
      mac: { get_attribute: [ovs_to_host_interface, mac_address] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: host_container
      - type: cloudify.relationships.depends_on
        target: ovs_to_host_interface
      - type: cloudify.relationships.depends_on
        target: ovs_server_network

  server_networking_config:
    type: cloudify.nodes.docker.container.NetworkingConfig
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      container_name: { get_property: [server_container, name] }
      subnet_cidr: { get_property: [host_ovs_network, cidr] }
      next_hop_ip: { get_attribute: [ovs_to_server_interface, ip_address] }
      mac: { get_attribute: [ovs_to_server_interface, mac_address] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: server_container
      - type: cloudify.relationships.depends_on
        target: ovs_to_server_interface
      - type: cloudify.relationships.depends_on
        target: host_ovs_network

  ovs_main_bridge:
    type: cloudify.nodes.docker.ovs.Bridge
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      name: { get_input: ovs_main_bridge_name }
      container_name: { get_property: [ovs_container, name] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: ovs_container

  ovs_to_host_openflow_interface:
    type: cloudify.nodes.docker.ovs.bridge.Interface
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      name: { get_attribute: [ovs_to_host_interface, physical_interface] }
      container_name: { get_property: [ovs_container, name] }
      bridge_name: { get_property: [ovs_main_bridge, name] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: ovs_to_host_interface
      - type: cloudify.relationships.connected_to
        target: ovs_main_bridge

  ovs_to_server_openflow_interface:
    type: cloudify.nodes.docker.ovs.bridge.Interface
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      name: { get_attribute: [ovs_to_server_interface, physical_interface] }
      container_name: { get_property: [ovs_container, name] }
      bridge_name: { get_property: [ovs_main_bridge, name] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: ovs_to_server_interface
      - type: cloudify.relationships.connected_to
        target: ovs_main_bridge

  ovs_endpoint_1:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
         external_resource: true
         id: { get_input: endpoint_blueprint_id }
        deployment:
          inputs:
            docker_api_ip: { get_input: docker_api_ip }
            docker_api_port: { get_input: docker_api_port }
            docker_api_version: { get_input: docker_api_version }
            ovs_container_name: { get_property: [ovs_container, name] }
            ovs_main_bridge_name: { get_property: [ovs_main_bridge, name] }
            ovs_endpoint_bridge_name: { get_input: ovs_endpoint_1_bridge_name }
            ovs_endpoint_bridge_from_main_bridge_interface_name: { get_input: ovs_main_bridge_to_endpoint_1_interface_name }
            ovs_endpoint_bridge_to_main_bridge_interface_name: { get_input: ovs_main_bridge_from_endpoint_1_interface_name }
            ovs_flows_default_table: { get_input: ovs_flows_default_table }
            ovs_flows_default_priority: { get_input: ovs_flows_default_priority }
          outputs:
            main_bridge_to_endpoint_bridge_ofport: in_ofport
            main_bridge_from_endpoint_bridge_ofport: out_ofport
          logs:
            redirect: true
    relationships:
      - type: cloudify.relationships.connected_to
        target: ovs_main_bridge

  ovs_endpoint_2:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
         external_resource: true
         id: { get_input: endpoint_blueprint_id }
        deployment:
          inputs:
            docker_api_ip: { get_input: docker_api_ip }
            docker_api_port: { get_input: docker_api_port }
            docker_api_version: { get_input: docker_api_version }
            ovs_container_name: { get_property: [ovs_container, name] }
            ovs_main_bridge_name: { get_property: [ovs_main_bridge, name] }
            ovs_endpoint_bridge_name: { get_input: ovs_endpoint_2_bridge_name }
            ovs_endpoint_bridge_from_main_bridge_interface_name: { get_input: ovs_main_bridge_to_endpoint_2_interface_name }
            ovs_endpoint_bridge_to_main_bridge_interface_name: { get_input: ovs_main_bridge_from_endpoint_2_interface_name }
            ovs_flows_default_table: { get_input: ovs_flows_default_table }
            ovs_flows_default_priority: { get_input: ovs_flows_default_priority }
          outputs:
            main_bridge_to_endpoint_bridge_ofport: in_ofport
            main_bridge_from_endpoint_bridge_ofport: out_ofport
          logs:
            redirect: true
    relationships:
      - type: cloudify.relationships.connected_to
        target: ovs_main_bridge

  ovs_endpoint_3:
    type: cloudify.nodes.DeploymentProxy
    properties:
      resource_config:
        blueprint:
         external_resource: true
         id: { get_input: endpoint_blueprint_id }
        deployment:
          inputs:
            docker_api_ip: { get_input: docker_api_ip }
            docker_api_port: { get_input: docker_api_port }
            docker_api_version: { get_input: docker_api_version }
            ovs_container_name: { get_property: [ovs_container, name] }
            ovs_main_bridge_name: { get_property: [ovs_main_bridge, name] }
            ovs_endpoint_bridge_name: { get_input: ovs_endpoint_3_bridge_name }
            ovs_endpoint_bridge_from_main_bridge_interface_name: { get_input: ovs_main_bridge_to_endpoint_3_interface_name }
            ovs_endpoint_bridge_to_main_bridge_interface_name: { get_input: ovs_main_bridge_from_endpoint_3_interface_name }
            ovs_flows_default_table: { get_input: ovs_flows_default_table }
            ovs_flows_default_priority: { get_input: ovs_flows_default_priority }
          outputs:
            main_bridge_to_endpoint_bridge_ofport: in_ofport
            main_bridge_from_endpoint_bridge_ofport: out_ofport
          logs:
            redirect: true
    relationships:
      - type: cloudify.relationships.connected_to
        target: ovs_main_bridge

  ovs_host_to_endpoint_1_flow:
    type: cloudify.nodes.docker.ovs.bridge.PermanentFlow
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      container_name: { get_property: [ovs_container, name] }
      bridge_name: { get_property: [ovs_main_bridge, name] }
      table: { get_input: ovs_flows_default_table }
      priority: { get_input: ovs_flows_default_priority }
      in_port: { get_attribute: [ovs_to_host_openflow_interface, id] }
      out_port: { get_attribute: [ovs_endpoint_1, deployment, outputs, in_ofport] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: ovs_main_bridge
      - type: cloudify.relationships.depends_on
        target: ovs_to_host_openflow_interface
      - type: cloudify.relationships.depends_on
        target: ovs_endpoint_1

  ovs_endpoint_1_to_endpoint_2_flow:
    type: cloudify.nodes.docker.ovs.bridge.PermanentFlow
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      container_name: { get_property: [ovs_container, name] }
      bridge_name: { get_property: [ovs_main_bridge, name] }
      table: { get_input: ovs_flows_default_table }
      priority: { get_input: ovs_flows_default_priority }
      in_port: { get_attribute: [ovs_endpoint_1, deployment, outputs, out_ofport] }
      out_port: { get_attribute: [ovs_endpoint_2, deployment, outputs, in_ofport] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: ovs_main_bridge
      - type: cloudify.relationships.depends_on
        target: ovs_endpoint_1
      - type: cloudify.relationships.depends_on
        target: ovs_endpoint_2

  ovs_endpoint_2_to_endpoint_3_flow:
    type: cloudify.nodes.docker.ovs.bridge.PermanentFlow
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      container_name: { get_property: [ovs_container, name] }
      bridge_name: { get_property: [ovs_main_bridge, name] }
      table: { get_input: ovs_flows_default_table }
      priority: { get_input: ovs_flows_default_priority }
      in_port: { get_attribute: [ovs_endpoint_2, deployment, outputs, out_ofport] }
      out_port: { get_attribute: [ovs_endpoint_3, deployment, outputs, in_ofport] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: ovs_main_bridge
      - type: cloudify.relationships.depends_on
        target: ovs_endpoint_2
      - type: cloudify.relationships.depends_on
        target: ovs_endpoint_3

  ovs_endpoint_3_to_server_flow:
    type: cloudify.nodes.docker.ovs.bridge.PermanentFlow
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      container_name: { get_property: [ovs_container, name] }
      bridge_name: { get_property: [ovs_main_bridge, name] }
      table: { get_input: ovs_flows_default_table }
      priority: { get_input: ovs_flows_default_priority }
      in_port: { get_attribute: [ovs_endpoint_3, deployment, outputs, out_ofport] }
      out_port: { get_attribute: [ovs_to_server_openflow_interface, id] }
      actions:
        concat:
          - 'mod_dl_src:'
          - { get_attribute: [ovs_to_server_interface, mac_address] }
          - ',mod_dl_dst:'
          - { get_attribute: [server_to_ovs_interface, mac_address] }
          - ','
    relationships:
      - type: cloudify.relationships.contained_in
        target: ovs_main_bridge
      - type: cloudify.relationships.depends_on
        target: ovs_endpoint_3
      - type: cloudify.relationships.depends_on
        target: ovs_to_server_openflow_interface
      - type: cloudify.relationships.depends_on
        target: server_to_ovs_interface
      - type: cloudify.relationships.depends_on
        target: ovs_to_server_interface

  ovs_server_to_endpoint_3_flow:
    type: cloudify.nodes.docker.ovs.bridge.PermanentFlow
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      container_name: { get_property: [ovs_container, name] }
      bridge_name: { get_property: [ovs_main_bridge, name] }
      table: { get_input: ovs_flows_default_table }
      priority: { get_input: ovs_flows_default_priority }
      in_port: { get_attribute: [ovs_to_server_openflow_interface, id] }
      out_port: { get_attribute: [ovs_endpoint_3, deployment, outputs, out_ofport] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: ovs_main_bridge
      - type: cloudify.relationships.depends_on
        target: ovs_to_server_openflow_interface
      - type: cloudify.relationships.depends_on
        target: ovs_endpoint_3

  ovs_endpoint_3_to_endpoint_2_flow:
    type: cloudify.nodes.docker.ovs.bridge.PermanentFlow
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      container_name: { get_property: [ovs_container, name] }
      bridge_name: { get_property: [ovs_main_bridge, name] }
      table: { get_input: ovs_flows_default_table }
      priority: { get_input: ovs_flows_default_priority }
      in_port: { get_attribute: [ovs_endpoint_3, deployment, outputs, in_ofport] }
      out_port: { get_attribute: [ovs_endpoint_2, deployment, outputs, out_ofport] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: ovs_main_bridge
      - type: cloudify.relationships.depends_on
        target: ovs_endpoint_3
      - type: cloudify.relationships.depends_on
        target: ovs_endpoint_2

  ovs_endpoint_2_to_endpoint_1_flow:
    type: cloudify.nodes.docker.ovs.bridge.PermanentFlow
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      container_name: { get_property: [ovs_container, name] }
      bridge_name: { get_property: [ovs_main_bridge, name] }
      table: { get_input: ovs_flows_default_table }
      priority: { get_input: ovs_flows_default_priority }
      in_port: { get_attribute: [ovs_endpoint_2, deployment, outputs, in_ofport] }
      out_port: { get_attribute: [ovs_endpoint_1, deployment, outputs, out_ofport] }
    relationships:
      - type: cloudify.relationships.contained_in
        target: ovs_main_bridge
      - type: cloudify.relationships.depends_on
        target: ovs_endpoint_2
      - type: cloudify.relationships.depends_on
        target: ovs_endpoint_1

  ovs_endpoint_1_to_host_flow:
    type: cloudify.nodes.docker.ovs.bridge.PermanentFlow
    properties:
      hosts:
        - { get_input: docker_api_ip }
      port: { get_input: docker_api_port }
      api_version: { get_input: docker_api_version }
      container_name: { get_property: [ovs_container, name] }
      bridge_name: { get_property: [ovs_main_bridge, name] }
      table: { get_input: ovs_flows_default_table }
      priority: { get_input: ovs_flows_default_priority }
      in_port: { get_attribute: [ovs_endpoint_1, deployment, outputs, in_ofport] }
      out_port: { get_attribute: [ovs_to_host_openflow_interface, id] }
      actions:
        concat:
          - 'mod_dl_src:'
          - { get_attribute: [ovs_to_host_interface, mac_address] }
          - ',mod_dl_dst:'
          - { get_attribute: [host_to_ovs_interface, mac_address] }
          - ','
    relationships:
      - type: cloudify.relationships.contained_in
        target: ovs_main_bridge
      - type: cloudify.relationships.depends_on
        target: ovs_to_host_openflow_interface
      - type: cloudify.relationships.depends_on
        target: ovs_endpoint_1
      - type: cloudify.relationships.depends_on
        target: host_to_ovs_interface
      - type: cloudify.relationships.depends_on
        target: ovs_to_host_interface

outputs:
  ping_check_command:
    value:
      concat:
        - 'docker exec '
        - { get_property: [host_container, name] }
        - ' ping '
        - { get_attribute: [server_to_ovs_interface, ip_address] }
